'''Ficheiro com funcoes para configuracao do servidor'''

import re
import os

html_types = {
    'STR' : 'text',
    'NUM' : 'number',
    'FILE' : 'file'
}

def config_server(server_dir,config_file):
    '''Modificar configuracoes do servidor'''

    # www file (ip and port changed)
    __www_file(f'{server_dir}/bin/www',config_file['ip'],config_file['porta'])

    # layout.pug file (alterar titulo do layout)
    __layout_pug_file(f'{server_dir}/views/layout.pug',config_file['nome'])

    #nome das ferramentas organizado por familias
    ferramentas = config_file['ferramentas']
    families = {family:list(tools.keys()) for family,tools in ferramentas.items()}
    #TODO: se calhar deviamos ordenar este dicionario por familia e a lista de nome de tools
    # ou deixamos pela ordem que ele meteu na config (que é a que está), podes escolher Braz

    # index.pug file (criar a view inicial do servidor com botoes para as ferramentas)
    __index_pug_file(f'{server_dir}/views/index.pug',config_file['nome'],families)

    # {family}_{tool}.pug file (criar uma view para cada conjunto de ferramentas)
    __tool_pug_file(f'{server_dir}/views', ferramentas)

    # criar rota para cada familia e ferramenta
    __tool_create_routes(f'{server_dir}/routes/index.js',ferramentas)


def __www_file(www_path,ip,porta):
    '''Modificar configuracoes do servidor, porta e ip'''
    www_file = open(www_path,'r')
    www = www_file.read()
    www_file.close()
    www = re.sub(r'\$ip',f'\"{ip}\"',www)
    www = re.sub(r'\$port',f'\"{porta}\"',www)
    www_file = open(www_path,'w')
    www_file.write(www)
    www_file.close()

def __layout_pug_file(layout_path,nome):
    '''Modificar configuracoes do layout, titulo'''
    layout_file = open(layout_path,'r')
    layout = layout_file.read()
    layout_file.close()
    layout = re.sub(r'title=(.*)',f'title {nome}',layout)
    layout_file = open(layout_path,'w')
    layout_file.write(layout)
    layout_file.close()

def __index_pug_file(index_path, name, families):
    '''Criar o index do servidor. '''
    index_file = open(index_path,'w+')

    index = f"""extends layout

block content
    .w3-container.w3-indigo
        h1 {name}
    .w3-container"""
    
    for family,tools in families.items():
        index += f"""
        .w3-container
            h2 {family}"""
        for tool in tools:
            index += f'''
            button.w3-btn
                a(href="/{family}/{tool}") {tool}'''

    index += f"""
    .w3-container.w3-indigo
        h3 Generated by Tools Server in 2023"""

    index_file.write(index)
    index_file.close()

def __pug_input_field(type,nome):
    return f'''input.w3-input.w3-round(type="{html_types[type]}" name="{nome}")'''

def __tool_pug_file(path, ferramentas):
    '''Criar a view de cada ferramenta'''
    for family,tools in ferramentas.items():
        for tool,config in tools.items():
            descricao = config['descricao']
            inputs = config['inputs']
            outputs = config['outputs']
            # print(descricao) #TODO: está a ficar com '\n' no .pug na mesma e não pode
            pug = f'''
extends layout
block content
    .w3-container.w3-indigo
        h1 {tool}
'''
            for line in descricao.splitlines():
                pug += f'''
        p {line}'''
            pug +='''
    form.w3-container.w3-indigo
        fieldset
            legend Inputs'''
            for id,input_dict in inputs:
                nome = input_dict['nome'] if input_dict['nome'] else id
                input_type = input_dict['tipo']
                pug += f'''
            label {nome}
            {__pug_input_field(input_type,nome)}
'''
            pug += f'''
        button.w3-btn.w3-purple.w3-mb-2(type="submit") Submit
'''
            pug += f'''
    .w3-container.w3-indigo
        h3 Generated by Tools Server in 2023 - [#[a(href="/") Return]]    
'''
            
            tool_file = open(f'{path}/{family}_{tool}.pug','w+')
            tool_file.write(pug)
            tool_file.close()


def __tool_create_routes(index_path,ferramentas):
    '''Cria as rotas para cada uma das ferramentas e familias'''
    file = open(index_path,'r')
    index = file.read()
    file.close()


    index = index.splitlines()
    # retirar ultima linha (module.exports = router;)
    export_router = index[-1]
    index = "\n".join(index[:-1])

    for family,tools in ferramentas.items():
        for tool,config in tools.items():
            index += f'''
router.get('/{family}/{tool}', function(req, res, next) {'{'}
    res.render('{family}_{tool}', {'{'} title: '{family}' {'}'});
{'}'});
''' 
           

    # adicionar ultima linha (module.exports = router;)
    index += f'''
{export_router}'''
    file = open(index_path,'w')
    file.write(index)
    file.close()

